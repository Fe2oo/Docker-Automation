import tkinter as tk
from tkinter import messagebox, scrolledtext, filedialog
import subprocess
import os


def custom_input_dialog(title, prompt):
    value = None

    def on_submit():
        nonlocal value
        value = entry.get().strip()
        dialog.destroy()

    def on_cancel():
        nonlocal value
        value = None
        dialog.destroy()

    dialog = tk.Toplevel(root)
    dialog.title(title)
    dialog.geometry("350x140")
    dialog.resizable(False, False)
    dialog.grab_set()

    tk.Label(dialog, text=prompt, font=("Segoe UI", 10)).pack(pady=(15, 5))
    entry = tk.Entry(dialog, width=35, font=("Segoe UI", 10))
    entry.pack(pady=5)
    entry.focus()

    btn_frame = tk.Frame(dialog)
    btn_frame.pack(pady=10)

    tk.Button(btn_frame, text="OK", width=10, command=on_submit).pack(side=tk.LEFT, padx=5)
    tk.Button(btn_frame, text="Cancel", width=10, command=on_cancel).pack(side=tk.LEFT, padx=5)

    root.wait_window(dialog)
    return value


def run_command(cmd):
    try:
        result = subprocess.run(
            cmd,
            check=True,
            capture_output=True,
            text=True,
            encoding="utf-8",
            errors="replace"
        )
        return result.stdout + "\n‚úÖ Command executed successfully.\n"
    except subprocess.CalledProcessError as e:
        return f"‚ùå Error:\n{e.stderr or e.stdout or str(e)}"



def get_used_ports():
    result = run_command(["docker", "ps", "--format", "{{.Ports}}"])
    ports = set()
    for line in result.strip().splitlines():
        if "->" in line:
            mappings = line.split(",")
            for m in mappings:
                parts = m.strip().split("->")
                if ":" in parts[0]:
                    ports.add(int(parts[0].split(":")[-1]))
    return ports


def create_dockerfile_gui():
    def save():
        content = content_box.get("1.0", tk.END).strip()
        path = path_entry.get().strip()
        if not content or not path:
            messagebox.showwarning("Warning", "All fields are required.")
            return
        try:
            with open(path, "w") as f:
                f.write(content)
            output.insert(tk.END, f"\n‚úÖ Dockerfile saved at {path}\n")
            win.destroy()
        except Exception as e:
            output.insert(tk.END, f"\n‚ùå Error: {e}\n")

    win = tk.Toplevel(root)
    win.title("Create Dockerfile")

    tk.Label(win, text="Path to save Dockerfile:").pack()
    path_entry = tk.Entry(win, width=60)
    path_entry.pack()

    tk.Label(win, text="Dockerfile Content:").pack()
    content_box = scrolledtext.ScrolledText(
        win, width=80, height=18, font=("Consolas", 11), bg="#f9f9f9",
        fg="#333333", insertbackground="#000000", borderwidth=2, relief="groove",
        padx=10, pady=10
    )
    content_box.pack(padx=10, pady=5)

    tk.Button(win, text="Save Dockerfile", command=save).pack(pady=10)


def build_docker_images_gui():
    try:
        num = custom_input_dialog("Build Images", "Number of images to build:")
        if not num or not num.isdigit():
            return

        for i in range(int(num)):
            path = filedialog.askopenfilename(title=f"Select Dockerfile for image {i+1}")
            name = custom_input_dialog("Image Name", f"Image name {i+1}:")
            tag = custom_input_dialog("Tag", "Image tag (e.g. latest):")

            if path and name and tag:
                cmd = ["docker", "build", "-f", path, "-t", f"{name}:{tag}", os.path.dirname(path)]
                output.insert(tk.END, f"\nüõ†Ô∏è Building {name}:{tag}...\n")

                result = subprocess.run(cmd, capture_output=True, text=True)

                output.insert(tk.END, result.stdout + "\n")
                if result.stderr:
                    output.insert(tk.END, result.stderr + "\n")

                if result.returncode == 0:
                    output.insert(tk.END, f"‚úÖ Image {name}:{tag} built successfully!\n")
                else:
                    output.insert(tk.END, f"‚ö†Ô∏è Build may have failed or completed with warnings.\n")

    except Exception as e:
        output.insert(tk.END, f"\n‚ùå {e}\n")





def list_docker_images_gui():
    output.insert(tk.END, "\n=== Docker Images ===\n")
    output.insert(tk.END, run_command(["docker", "images"]))


def run_containers_gui():
    try:
        num = custom_input_dialog("Run Containers", "Number of containers to run:")
        if not num or not num.isdigit(): return
        base_port = 5000
        used_ports = get_used_ports()

        for i in range(int(num)):
            name = custom_input_dialog("Container Name", f"Container name {i+1}:")
            img = custom_input_dialog("Image", f"Image name for container {i+1}:")
            tag = custom_input_dialog("Tag", "Image tag (e.g. latest):")

            while base_port in used_ports:
                base_port += 1

            cmd = ["docker", "run", "-d", "-p", f"{base_port}:5000", "--name", name, f"{img}:{tag}"]
            output.insert(tk.END, f"\nRunning container '{name}' on port {base_port}...\n")
            output.insert(tk.END, run_command(cmd))
            base_port += 1
    except Exception as e:
        output.insert(tk.END, f"\n‚ùå {e}\n")


def list_running_containers_gui():
    output.insert(tk.END, "\n=== Running Containers ===\n")
    output.insert(tk.END, run_command(["docker", "ps"]))


def stop_container_gui():
    name = custom_input_dialog("Stop Container", "Enter container name to stop:")
    if name:
        output.insert(tk.END, f"\nStopping container '{name}'...\n")
        output.insert(tk.END, run_command(["docker", "stop", name]))


def search_docker_images_gui():
    query = custom_input_dialog("Search Image", "Enter image name/tag:")
    if query:
        output.insert(tk.END, f"\nSearching Docker Hub for '{query}'...\n")
        output.insert(tk.END, run_command(["docker", "search", query]))


# === GUI Layout ===
root = tk.Tk()
root.title("Docker Automation GUI")
root.geometry("950x600")

frame = tk.Frame(root)
frame.pack(pady=10)

buttons = [
    ("Create Dockerfiles", create_dockerfile_gui),
    ("Build Docker Images", build_docker_images_gui),
    ("List Docker Images", list_docker_images_gui),
    ("Run Containers", run_containers_gui),
    ("List Running Containers", list_running_containers_gui),
    ("Stop a Container", stop_container_gui),
    ("Search for Images", search_docker_images_gui),
    ("Exit", root.quit),
]

for text, func in buttons:
    tk.Button(frame, text=text, width=25, command=func).pack(pady=2)

output = scrolledtext.ScrolledText(
    root, width=120, height=25, font=("Courier New", 10),
    bg="#1e1e1e", fg="#dcdcdc", insertbackground="white",
    borderwidth=1, relief="sunken", padx=10, pady=10
)
output.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

root.mainloop()